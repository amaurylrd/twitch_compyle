[tool.poetry]
name = "compyle"
version = "0.1.0-alpha.1"
description = "Twitch Compyle is an app that allows you to create Youtube compilations of the latest Twitch clips on your favorite games."
authors = [
    "adesvall <adesvall@users.noreply.github.com>",
    "amaurylrd <amaurylrd@users.noreply.github.com>",
    "thomasabreudias <thomasabreudias@users.noreply.github.com>"
]

repository = "https://github.com/amaurylrd/twitch_compyle"
documentation = "https://google.com"
packages = [{include = "compyle"}]
readme = "README.md"
license = "Apache-2.0"
classifiers = [
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: Utilities",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.10",
    "License :: Other/Proprietary License",
    "Operating System :: Microsoft :: Windows :: Windows 10",
    "Operating System :: Unix",
]

[tool.poetry.dependencies]
python = "~3.12.0"
python-semantic-release = "^8.0.0"
python-dotenv = "^1.0.0"

pymongo = {extras = ["srv"], version = "^4.0.0"}
jsonschema = "^4.0.1"
retrying = "^1.3.4"
numpy = "^1.26.0"
aenum = "3.1.15"
djangorestframework = "^3.14"
requests = "2.32.3"
moviepy = "1.0.3"
opencv-python = ">=4.7.0"
transformers = "^4.33.1"

[tool.poetry.group.lint.dependencies]
pre-commit = "^3.1"
bandit = "1.7.9"
black = "24.4.2"
pylama = {extras = ["all"], version = "^8.4.1"}
pylint = "^2.10.2"
pydocstyle = "6.3.0"
types-docutils = "^0.19.0"
types-markdown = "^3.4.2.9"
types-python-dateutil = "^2.8.19.6"
types-setuptools = "^65.7.0.3"
isort = "5.13.2"
flake8 = "^6.0.0"
eradicate = "^2.2.0"
mypy = "^1.1"
toml = "^0.10.2"

[tool.poetry.group.doc.dependencies]
pdoc = "14.5.1"

[tool.poetry.group.test.dependencies]
coverage = "^7.3.1"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.2.0"]

[tool.coverage.run]
command_line = "-m unittest discover compyle.tests"
include = ["**/*_test.py", "**/test_*.py"]
disable_warnings = ["no-data-collected"]

[tool.coverage.report]
fail_under = 60

[tool.black]
exclude = '''
(
    /(
        \.git
        |\.venv
    )/
)
'''
include = '\.pyi?$'
line-length = 120

[tool.isort]
profile = "black"
known_first_party = "compyle"

[tool.bandit]
targets = ["compyle"]
exclude_dirs = [".venv"]

[tool.pylama]
format = "pycodestyle"
linters = "pycodestyle,pyflakes,mccabe,eradicate,pylint"
skip = ".venv/*"
max_line_length = 120

[tool.pylama.linter.pycodestyle]
convention = "google"
ignore = "E501,E261,E201,E202,E203,E302,E305,E731,W6,E402,W503,W605"
max_line_length = 120

[tool.pylama.linter.pylint]
disable = "R,E1101,E1130,E1136,E0401,C0103,C0114,C0115,C0116,W0511,W0603,W0612,W0613,W0703,W1514,W1401,W0622"
max_line_length = 120

[tool.semantic_release]
version_variable = "compyle/__init__.py:__version__"
version_toml = [
    "pyproject.toml:tool.poetry.version",
]
version_pattern = [
    "README.md:rev: v{version}",
]
build_command = "pip install poetry && poetry build -f wheel"
branch = "main"
prerelease_tag = "alpha"
major_on_zero = "false"
upload_to_pypi = "false"
upload_to_repository = "false"
upload_to_release = "true"
commit_version_number = "true"
commit_subject = "chore(release): v{version}"
version_source = "tag"
